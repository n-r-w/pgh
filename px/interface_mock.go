// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source interface.go -destination interface_mock.go -package px
//

// Package px is a generated GoMock package.
package px

import (
	context "context"
	reflect "reflect"

	pgx "github.com/jackc/pgx/v5"
	pgconn "github.com/jackc/pgx/v5/pgconn"
	gomock "go.uber.org/mock/gomock"
)

// MockIQuerier is a mock of IQuerier interface.
type MockIQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockIQuerierMockRecorder
}

// MockIQuerierMockRecorder is the mock recorder for MockIQuerier.
type MockIQuerierMockRecorder struct {
	mock *MockIQuerier
}

// NewMockIQuerier creates a new mock instance.
func NewMockIQuerier(ctrl *gomock.Controller) *MockIQuerier {
	mock := &MockIQuerier{ctrl: ctrl}
	mock.recorder = &MockIQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIQuerier) EXPECT() *MockIQuerierMockRecorder {
	return m.recorder
}

// Exec mocks base method.
func (m *MockIQuerier) Exec(ctx context.Context, sql string, arguments ...any) (pgconn.CommandTag, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, sql}
	for _, a := range arguments {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(pgconn.CommandTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockIQuerierMockRecorder) Exec(ctx, sql any, arguments ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, sql}, arguments...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockIQuerier)(nil).Exec), varargs...)
}

// Query mocks base method.
func (m *MockIQuerier) Query(ctx context.Context, query string, args ...any) (pgx.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(pgx.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockIQuerierMockRecorder) Query(ctx, query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockIQuerier)(nil).Query), varargs...)
}

// MockIBatcher is a mock of IBatcher interface.
type MockIBatcher struct {
	ctrl     *gomock.Controller
	recorder *MockIBatcherMockRecorder
}

// MockIBatcherMockRecorder is the mock recorder for MockIBatcher.
type MockIBatcherMockRecorder struct {
	mock *MockIBatcher
}

// NewMockIBatcher creates a new mock instance.
func NewMockIBatcher(ctrl *gomock.Controller) *MockIBatcher {
	mock := &MockIBatcher{ctrl: ctrl}
	mock.recorder = &MockIBatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBatcher) EXPECT() *MockIBatcherMockRecorder {
	return m.recorder
}

// SendBatch mocks base method.
func (m *MockIBatcher) SendBatch(ctx context.Context, b *pgx.Batch) pgx.BatchResults {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendBatch", ctx, b)
	ret0, _ := ret[0].(pgx.BatchResults)
	return ret0
}

// SendBatch indicates an expected call of SendBatch.
func (mr *MockIBatcherMockRecorder) SendBatch(ctx, b any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendBatch", reflect.TypeOf((*MockIBatcher)(nil).SendBatch), ctx, b)
}

// MockITransactionBeginner is a mock of ITransactionBeginner interface.
type MockITransactionBeginner struct {
	ctrl     *gomock.Controller
	recorder *MockITransactionBeginnerMockRecorder
}

// MockITransactionBeginnerMockRecorder is the mock recorder for MockITransactionBeginner.
type MockITransactionBeginnerMockRecorder struct {
	mock *MockITransactionBeginner
}

// NewMockITransactionBeginner creates a new mock instance.
func NewMockITransactionBeginner(ctrl *gomock.Controller) *MockITransactionBeginner {
	mock := &MockITransactionBeginner{ctrl: ctrl}
	mock.recorder = &MockITransactionBeginnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITransactionBeginner) EXPECT() *MockITransactionBeginnerMockRecorder {
	return m.recorder
}

// BeginTx mocks base method.
func (m *MockITransactionBeginner) BeginTx(arg0 context.Context, arg1 pgx.TxOptions) (pgx.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", arg0, arg1)
	ret0, _ := ret[0].(pgx.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockITransactionBeginnerMockRecorder) BeginTx(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockITransactionBeginner)(nil).BeginTx), arg0, arg1)
}
